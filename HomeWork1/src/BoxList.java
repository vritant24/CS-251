
import java.util.LinkedList;
import java.util.List;

/**
 * List implementation of BoxList
 *
 * Returns totalWeight of boxes in list in constant time
 * and returns totalValue of boxes in list in constant time.
 * 
 * DO NOT EDIT THIS FILE
 */
public class BoxList {
	private List<Box> boxlist;
	private int totalValue;
	private int totalWeight;
	public BoxList() {
		this.boxlist = new LinkedList<Box>();
		this.totalValue = 0;
		this.totalWeight = 0;
	}
	
	/**
	 * appends box to the end of this list
	 * @param box
	 * @return true if box was added to this list
	 */
	public boolean add(Box box) {
		// append box to end of list
		if (!this.boxlist.add(box)) {
			return false;
		}
		
		this.totalValue += box.value;
		this.totalWeight += box.weight;
		
		return true;
	}
	
	/**
	 * removes box at specified index
	 * @param index
	 * @return box at specified index
	 */
	public Box remove(int index) {
		Box box = this.boxlist.remove(index);
		if (box == null) {
			return null;
		}
		
		this.totalValue -= box.value;
		this.totalWeight -= box.weight;
		
		return box;
	}

	/**
	 * @return amount of boxes in this list
	 */
	public int size() {
		return this.boxlist.size();
	}
	
	/**
	 * @return box at index specified
	 */
	public Box get(int index) {
		return this.boxlist.get(index);
	}
	
	/**
	 * @return sum of values of boxes in this list
	 */
	public int getTotalValue() {
		return this.totalValue;
	}
	
	/**
	 * @return sum of weights of boxes in this list
	 */
	public int getTotalWeight() {
		return this.totalWeight;
	}
	
	public String toString() {
		return this.boxlist.toString();
	}
}

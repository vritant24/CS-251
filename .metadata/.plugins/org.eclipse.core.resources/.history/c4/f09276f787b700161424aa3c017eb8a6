import java.util.*;
import java.lang.*;

/*		Part 1
 *
 * 		TODO: Implement the following method stubs
 *
 * 		medianDegree
 * 		hasGiantConnectedComponent
 * 		is5Clique
 * 		has6DegreeRootN
 * 		has6Degree6
 */
public class Part1 {


	// TODO:
	// Find the median degree of all vertices in G
	public double medianDegree(Graph G)
	{
		double[] track = new double[G.getNumVertices()]; // tracks degrees of each vertex

		//Add degrees of each vertex into track
		for(int i = 0; i < G.getNumVertices(); i++) {
			track[i] = (double) getDegree(G, i);
		}

		//find median
		Arrays.sort(track);
		if(track.length % 2 == 1) {
			return track[track.length / 2];
		}
		else {
			return ((track[track.length / 2] + track[(track.length / 2) - 1]) / 2.0);
		}
	}


	/**
	 * Finds degree of given vertex
	 * @param G
	 * @param vertex
	 * @return degree of vertex
	 */
	public int getDegree(Graph G, int vertex) {
//		int counter = 0;
//		for(int j = 0; j < G.numVertices; j++) {
//			if(vertex == j) {
//				continue;
//			}
//			if(G.hasEdge(vertex, j)) {
//				counter++;
//			}
//		}
//		return counter;
		return G.getAdjacentVertices(vertex).size();
	}

	// TODO:
	// Determines if G has a connected component of size greater than or equal to ceil(n/2)
	// If it does, return a linked list contining the vertices in the giant connected component
	// Returns an empty list if there is no giant connected component
	public LinkedList<Integer> hasGiantConnectedComponent(Graph G)
	{
		return null;
	}

	public LinkedList<Integer> findGCC(Graph G, int vertex, int size) {
		LinkedList<Integer> list = new LinkedList<>();
		
		
		
		return null;
	}

	// TODO:
	// Returns true if the given 5 vertices in the list form a clique
	// Returns false otherwise
	public boolean is5Clique(Graph G, LinkedList<Integer> vertices)
	{
		int length = vertices.size();

		//check if there are 5 vertices
		if(length != 5) {
			return false;
		}
		
		int[] array = new int[5];
		for(int i = 0; i < 5; i++) {
			array[i] = vertices.removeLast();
		}

		for(int i = 0; i < length; i++) {
			for(int j = 0; j < length; j++) {
				if(i == j) {
					continue;
				}

				//check for distinct vertices
				if(array[i] == array[j]) {
					return false;
				}

				//check if a vertex has all needed edges
				if(!G.hasEdge(array[i], array[j])) {
					return false;
				}
			}
		}
		return true;
	}



	// TODO:
	// Determines if the given graph has at least 6 vertices of degree
	// greater than or equal to floor(sqrt(n))
	// If so, return a linked list containing 6 vertices of degree greater than or equal to
	// floor(sqrt(n))
	// Return an empty list if there are not at least 6 vertices with the required degree
	public LinkedList<Integer> has6DegreeRootN(Graph G)
	{
		int length = G.getNumVertices();
		LinkedList<Integer> list = new LinkedList<>();

		if(length < 6) {
			return list;
		}

		double compare = Math.sqrt(length);
		for(int i = 0; i < length; i++) {
			if(getDegree(G, i) >= (int)compare) {
				list.add(i);
				if (list.size() == 6) {
					break;
				}
			}
		}

		if(list.size() < 6) {
			list = new LinkedList<>();
		}

		return list;
	}



	// TODO:
	// Determines if the graph has at least 6 vertices of degree less than 6
	// If so, return a linked list containing 6 vertices that satisfy the condition
	// If not, return an empty linked list.
	public LinkedList<Integer> has6Degree6(Graph G)
	{
		int length = G.getNumVertices();
		LinkedList<Integer> list = new LinkedList<>();

		if(length < 6) {
			return list;
		}

		for(int i = 0; i < length; i++) {
			if(getDegree(G, i) < 6) {
				list.add(i);
				if (list.size() == 6) {
					break;
				}
			}
		}

		if(list.size() < 6) {
			list = new LinkedList<>();
		}

		return list;
	}
}

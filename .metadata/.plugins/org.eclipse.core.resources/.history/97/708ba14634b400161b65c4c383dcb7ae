import java.util.*;
import java.lang.*;

/*		Part 1
 * 
 * 		TODO: Implement the following method stubs
 * 		You must submit this file
 *
 * 		medianDegree
 * 		hasGiantConnectedComponent
 * 		is5Clique
 * 		has6DegreeRootN
 * 		has6Degree6
 */
public class Part1 {


	// TODO:
	// Find the median degree of all vertices in G
	public double medianDegree(Graph G)
	{	
		double[] track = new double[G.getNumVertices()]; // tracks degrees of each vertex
		
		//Add degrees of each vertex into track
		for(int i = 0; i < G.getNumVertices(); i++) {
			track[i] = (double) getDegree(G, i);
		}
		
		//find median
		Arrays.sort(track);
		if(track.length % 2 == 1) {
			return track[track.length / 2];
		}
		else {
			return ((track[track.length / 2] + track[(track.length / 2) + 1]) / 2);
		}
	}
	
	/**
	 * Finds degree of given vertex
	 * @param G
	 * @param vertex
	 * @return degree of vertex
	 */
	public int getDegree(Graph G, int vertex) {
		int counter = 0;
		for(int j = 0; j < G.numVertices; j++) {
			if(vertex == j) {
				continue;
			}
			if(G.hasEdge(vertex, j)) {
				counter++;
			}
		}
		return counter;
	}
	
	// TODO:
	// Returns true if G has a connected component of size greater than n/2
	// Returns false otherwise
	public LinkedList<Integer> hasGiantConnectedComponent(Graph G)
	{
		return new LinkedList<Integer>();
	}
	
	
	
	// TODO:
	// Returns true if the given 5 vertices in the list form a clique
	// Returns false otherwise
	public boolean is5Clique(Graph G, LinkedList<Integer> vertices)
	{
		int length = vertices.size();
		
		//check if there are 5 vertices
		if(length != 5) {
			return false;
		}
		
		int[] array = new int[5];
		for(int i = 0; i < 5; i++) {
			array[i] = vertices.removeLast();
		}
		
		for(int i = 0; i < length; i++) {
			for(int j = 0; j < length; j++) {
				if(i == j) {
					continue;
				}
				
				//check for distinct vertices
				if(array[i] == array[j]) {
					return false;
				}
				
				//check if a vertex has all needed edges
				if(!G.hasEdge(array[i], array[j])) {
					return false;
				}
			}
		}
		return true;
	}
	
	
	
	// TODO:
	// If the given graph has at least 6 vertices of degree sqrt(n) returns 6 such vertices
	// Return an empty list otherwise
	public LinkedList<Integer> has6DegreeRootN(Graph G)
	{
		return new LinkedList<Integer>();
	}
	
	
	
	// TODO:
	// If the given graph has at least 6 vertices of degree 6 returns 6 such vertices
	// Return an empty list otherwise
	public LinkedList<Integer> has6Degree6(Graph G)
	{
		LinkedList<Integer> list = new LinkedList<>();
		int temp;
		
		for(int i = 0; i < G.getNumVertices(); i++) {
			if(getDegree(G, i) >= 6) {
				list.add(i);
			}
		}
		
		return new LinkedList<Integer>();
	}
}

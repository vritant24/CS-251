package merkle.implementation;

import merkle.Configuration;
import merkle.IMerkleTree;

import java.io.*;

import static merkle.Configuration.blockSize;
import static merkle.Configuration.hashFunction;

/**
 * TASK 1
 * TODO: IMPLEMENT build
 *
 * @author Vritant Bhardwaj
 * @pso 17
 * @date 10/18/2016
 */
public class MerkleTree extends IMerkleTree {


    /**
     * Given an <i>inputFile</i> this function builds a Merkle Tree and return the <i>masterHash</i>
     * <i>this.tree</i> is the array representation of the tree which you need to create
     * You can use <i>Configuration.hashFunction</i>
     * The basic code to read a file block wise is provided. You can choose to use it.
     * The tree should be 1-indexed
     */
    @Override
    public String build(File inputFile) throws Exception {
    	long startTime = System.currentTimeMillis();
        int blocks = (int) Math.ceil((double) inputFile.length() / Configuration.blockSize);
        int size = 2 * blocks;
        tree = new Node[size];//Initialize this with a proper size
        tree[0] = new Node("dummy", 0);//Zeroth dummy node
        int index; //tracks index in heap
        
        try (BufferedInputStream reader = new BufferedInputStream(new FileInputStream(inputFile))) {
            byte[] byteArray = new byte[blockSize];
            int readStatus;
            
            index = blocks;// set index to 1st leaf
            while ((readStatus = reader.read(byteArray)) != -1) {
                String block = padBytes(byteArray, readStatus);
                block = Configuration.hashFunction.hashBlock(block); //hash the given block
                tree[index] = new Node(block, index++); //store hashed block in merkle tree
            }
        }
        
        //fill the rest of the nodes of the tree
        for(int i = blocks - 1; i >= 1; i--) {
        	//set parent node to the hash of the concatenated hashes of its children
        	tree[i] = new Node(Configuration.hashFunction.concatenateHash(tree[2 * i], tree[(2 * i) + 1]), i);
        }
        
        long endTime = System.currentTimeMillis();
        System.out.println("Total execution time: " + (endTime - startTime) );
        String masterHash = tree[1].getHash(); // set to root of tree
        return masterHash;
    }
}
